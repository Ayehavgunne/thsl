# comments use a # (pound sign, hash)

# all root values get serialized into single dictionary

debug .bool: false
num .int: -3
name .str: Frank Drebin  # strings don't need quotes and will be left/right trimmed of whitespace
name_quotes .str: " My name"  # but they can use quotes if you don't want to trim the whitespace
name_single_quotes .str: 'My name is {name}'  # single quotes allow templating
escaping .str: " My \"Name"

# currently the colon is not required but it helps with readability
less_readable .int -3

# curly braces need escaping to be included in single quotes
escaping_single_quotes .str: 'My name is \{{name}\}'

# types are preceded by a . (dot, period) to allow for seamlessly adding new ones in the future

graphics:
	target_framerate .int: 60
	fullscreen .bool: false
	resolution .dict:
		width .int: 1920
		height .int: 1080
	key .str  # defaults to empty string
	key_without_value .float  # defaults to 0
# null is not an option by default, a nullable decorator is available to mark as such
# indentation has to be a tab

a_char .char: a  # can only be a single character

multi_line_str .str: "This
string is
    on multiple
         lines.
"

"keys can be in quotes" .int: 1  # for keys to have spaces it must be in quotes

# no need to worry about using type identifiers as keys or values
int .int: 1
str .str: str

1 .str: one  # keys will always end up as strings

some_bytes .bytes: 1110101
a_complex .complex: 3-2i
a_decimal .dec: 4.2
infinity .float: inf
neg_infinity .float: -inf
not_a_number .dec: nan
sci_note .float: 1.3e-4
hexadecimal .hex: deadbeef
octal .oct: 7
base_64 .base64: VGhlIFNwYW5pc2ggSW5xdWlzaXRpb24h
base_64_encode .base64e: Encode this string to base64
birthday .date: 1986-02-10
new_year .datetime: 2020-01-01 12:00:00 -6
my_interval .interval: 1 hour
alarm .time: 08:00:00AM
ip_address .ip: 192.168.1.1
ip_network .network: 192.168.0.0/28
my_page .url: http://www.example.com/index.html
env_var .env: PATH
range_example .range: 1..5  # non-inclusive
inclusive_example .range: 1...5  # inclusive
number_sep .int: 100_000_000  # numbers support seperators

uniform_list .int: [  # list entries are delimeted by a return character and use square brackets
	1
	2
	4
	7
]

complex_list .dict: [
	things:
		one .int: 1
		two .int: 2
	other_things:
		three .int: 3
		four .int: 4
]

heterogeneous_list: [
	.int: 1
	.float: 3.14159
	.dec: 2.11
	.str: hello
]

uniform_list_one_liner .int: [1, 2, 3,]  # trailing commas are valid
heterogeneous_list_one_liner: [.int: 1, .float: 3.14159, .dec: 2.11, .str: hello]

simple_tuple .int: (1, 2, 3)

typed_tuple: (
	.int: 1
	.float: 2
	.dec: 3
	.str: 4
)

named_tuple: (
	one .int
	two .int
	three .float: 3.0
)

tuple_one_liner: (.int:1,.float:2)  # spaces are not required between entries or key-values

# a non-uniform set is similar to the list variety

set_one_liner .int: {1, 2, 3}

dict_one_liner: {one .int: 1, two .float: 2}

# structs are very similar to dictionaries but can be handled differently by the consuming language
# Python could create a dataclass for example
# either dynamically or human readable code can be generated
MyStruct .struct:
	nested_struct .struct:
		first .int: 1  # provided values will be defaults for a struct
		second .int: 2
	enum_dict .dict:  # dict type is optional
		third .float: 3
		fourth: .str: 4
	key .str: value
	key_without_value .float
	recursion .MyStruct  # maybe, maybe not

AnotherStruct .struct:
	ref_other_struct .MyStruct

an_enum .enum:
	red  # enums entries don't need a type or a value but they can
	blue

my_int .alias: .int

# an interface that must be implemented
MyInterface .interface:
	a_method(.int, .float) .int  # takes int and float and returns an int
	no_return_value(.str)  # this doesn't have a return value
	using_alias(.str) .my_int
	default_values(.str hello, .int 5) .str  # default values can be specified for parameters
	return_type_unknown() .any

# decorators add metadata to fields
@immutable
some_data .struct:

	@required
	my_name .str

	@optional
	my_age .int

# allow inheritance

#Config .struct:
#	debug .bool: false
#	show_fps .bool: true
#	Graphics .struct:
#		target_framerate .int: 60
#		fullscreen .bool: false
#		hardware_acceleration .bool: false
#		vsync .bool: false
#		scaled .bool: true
#		Resolution .struct:  # 16:9 aspect ratio only please
#			width .int: 1920
#			height .int: 1080
